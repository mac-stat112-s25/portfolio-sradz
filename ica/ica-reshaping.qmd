---
title: "Reshaping"
format: html
---

Use this file for practice with the **reshaping** in-class activity. Refer to the class website for details.


## Warm-Up {.unnumbered}

### Exercise 1 {.unnumbered}
```{r}
library(tidyverse)
penguins <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-07-28/penguins.csv')
```
```{r}
# Using count()
penguins |>
  count(species, sex)

# Using group_by() and summarize()
penguins |>
  group_by(sex, species) |>
  summarize(n())

# proportion
penguins |>
  group_by(sex, species) |>
  summarize(n = n()) |>
  mutate(proportion = n/sum(n))

# relative frequency 
penguins |>
  group_by(species, sex) |>
  summarize(n = n()) |>
  mutate(freq = n/sum(n))

# order matters!
# Changing the order calculates the proportion of species within each sex

```
```{r}
# should get the average mass of each penguin species by sex
# but returns error b/c avg_body_mass isn't there anymore
penguin_avg <- penguins |> 
  group_by(species, sex) |> 
  summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE)) |> 
  na.omit()
```
### Example 3 {.unnumbered}
```{r}
# Units of observation = penguins
head(penguins)

# Units of observation = penguin species/sex groups
head(penguin_avg)
```
### Exercise 4/5 {.unnumbered}
```{r}
penguin_avg

# widen the dataset
# don't lose any information when widening
# units = penguin species
penguin_avg |> 
  pivot_wider(names_from = sex, values_from = avg_body_mass) |>
  mutate(difference = male-female)


```
### Exercise 6 {.unnumbered}
```{r}
penguin_avg_wide <- penguin_avg |> 
  pivot_wider(names_from = sex, values_from = avg_body_mass)

penguin_avg_wide

# make longer
# again, don't lose any information
# units = penguin/sex combos
penguin_avg_long <- penguin_avg_wide |>
  pivot_longer(cols=2:3, names_to = "sex", values_to = "avg body mass")

penguin_avg_long
```
### Exercise 7 {.unnumbered}
```{r}
# create  food data
food <- data.frame(
  customer = rep(c("A", "B"), each = 3),
  restaurant = rep(c("Shish", "FrenchMeadow", "DunnBros"), 2),
  order = c("falafel", "salad", "coffee", "baklava", "pastry", "tea")
)
food

# make wider
food |>
  pivot_wider(names_from = restaurant, values_from = order)

# add more food
more_food <- data.frame(
  customer = c("C", "D"),
  Shish = c("coffee", "maza"),
  FrenchMeadow = c("soup", "sandwich"),
  DunnBros = c("cookie", "coffee")
)
more_food

# make longer
more_food |>
  pivot_longer(cols = -customer, values_to = "order", names_to = "restaurant")

```
## Exercises

### Exercise 1 {.unnumbered}

```{r}
sleep_wide <- read.csv("https://mac-stat.github.io/data/sleep_wide.csv")

head(sleep_wide)
```
* observations = subjects
* ggplot(**sleep_wide**, aes(y = **reaction_time**, x = **day**, color = **subject**))

* can't do using sleep_wide, but could by making it longer (using pivot_longer())

### Exercise 2 {.unnumbered}
```{r}
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject, 
               names_to = "day", 
               values_to = "reaction_time",
               names_prefix = "day_") # name_prefix dropped the "day_" part of day values

head(sleep_long)

# plot
ggplot(sleep_long, aes(x=day, y=reaction_time, color = Subject))+
  geom_line()

# day is a character and we want it to be a number 
# subject is integer and we want it to be a category?


```
### Exercise 3 {.unnumbered}
```{r}
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject,
               names_to = "day",
               names_prefix = "day_",
               values_to = "reaction_time") |> 
  mutate(Subject = as.factor(Subject), day = as.numeric(day))

# Check it out
# Same data, different class
head(sleep_long)

# now subject is a factor; day is a number
```

```{r}
# Make a line plot of reaction time by day for each subject
# Put these all on the same frame

ggplot(sleep_long, aes(x=day, y=reaction_time, color=Subject))+
  geom_line()

# Make a line plot of reaction time by day for each subject
# Put these all on separate frames (one per subject)

ggplot(sleep_long, aes(x=day, y=reaction_time, color=Subject))+
  geom_line()+
  facet_wrap(~Subject)

```
**Summary:**
As the number of days increases, reaction time generally tends to increase. However, the extent to which reaction time increases and the rate that it increases by varies from subject to subject. There are some peaks/spikes for some subjects, like 370 or 332, but not for all.

### Exercise 4 {.unnumbered}
```{r}
# make wide again
# don't like how the column labels are just numbers (day is not mentioned)
sleep_long |>
  pivot_wider(names_from = day, values_from = reaction_time) |>
  head()

# add column titles using names_prefix argument
sleep_long |>
  pivot_wider(names_from = day, values_from = reaction_time, names_prefix = "day_") |>
  head()
```
### Exercise 5 {.unnumbered}
```{r}
# Load data
library(tidyr)
data("billboard")

# Check it out
head(billboard)
```
```{r}
# part a
ggplot(billboard, aes(x=wk1, y=wk2))+
  geom_point()+
  geom_abline(intercept = 0, slope = 1)

# part b
billboard |>
  mutate(improved = wk2 > wk1) |>
  filter(improved == "TRUE") |>
  head()

# part c
# Define nov_1999
nov_1999 <- billboard |>
  filter(date.entered == "1999-11-06") |>
  select(-track, -date.entered)

# Confirm that nov_1999 has 2 rows (songs) and 77 columns
dim(nov_1999)
 
```
```{r}
# part d
nov_1999 |>
  pivot_longer(cols= -artist, 
               names_to = "week", values_to = "ranking", 
               names_prefix = "wk") |>
  mutate(week = as.numeric(week)) |>
  ggplot(aes(x=week, y = ranking, color = artist))+
  geom_line()
```

### Exercise 6 {.unnumbered}
```{r}
library(fivethirtyeight)
data("daily_show_guests")
daily <- daily_show_guests
```
#### Part a {.unnumbered}
```{r}
daily |>
  count(raw_guest_list) |>
  arrange(desc(n)) |>
  head(15)
```

#### Part b {.unnumbered}
```{r}
daily2 <- daily |>
  count(year, raw_guest_list) |>
  group_by(raw_guest_list) |>
  mutate(total = sum(n)) |>
  pivot_wider(values_from = n, names_from = year, values_fill = 0) |>
  arrange(desc(total)) |>
  head(15)


daily2
```
#### part c {.unnumbered}
```{r}
daily |> 
  count(group)

plot_data <- daily |> 
  mutate(broad_group = case_when(
    group %in% c("Acting", "Athletics", "Comedy", "Musician") ~ "Acting, Comedy & Music",
    group %in% c("Media", "media", "Science", "Academic", "Consultant", "Clergy") ~ "Media",
    group %in% c("Politician", "Political Aide", "Government", "Military", "Business", "Advocacy") ~ "Government and Politics",
    .default = NA
  )) |> 
  filter(!is.na(broad_group))
```

```{r}
plot_data |>
  group_by(year, broad_group) |>
  summarize(n = n()) |>
  mutate(freq = n/sum(n)) |>
  ggplot(aes(x=year, y=freq, color=broad_group))+
  geom_line()
  

```

